{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport Swal from 'sweetalert2';\nvar path = 'http://localhost:4000/api';\nconst authActions = {\n  newUser: newUser => {\n    return async (dispatch, getState) => {\n      const response = await axios.post(path + `/user/register`, newUser);\n\n      if (!response.data.success) {\n        toast.error('Incorrect mail or password');\n      } else {\n        dispatch({\n          type: 'LOG_USER',\n          payload: {\n            firstName: response.data.firstName,\n            lastName: response.data.lastName,\n            mail: response.data.mail,\n            token: response.data.token,\n            contact: response.data.contact\n          }\n        });\n      }\n    };\n  },\n  logUser: logUser => {\n    return async (dispatch, getState) => {\n      const response = await axios.post(path + `/user/login`, logUser);\n\n      if (!response.data.success) {\n        toast.error('Incorrect mail or password');\n      } else {\n        toast('Welcome');\n        dispatch({\n          type: 'LOG_USER',\n          payload: {\n            firstName: response.data.firstName,\n            lastName: response.data.lastName,\n            mail: response.data.mail,\n            token: response.data.token,\n            contact: response.data.contact,\n            rol: response.data.rol,\n            rating: response.data.rating,\n            success: response.data.success\n          }\n        });\n      }\n    };\n  },\n  newUserGoogle: newUser => {\n    return async (dispatch, getState) => {\n      const response = await axios.post(path + `/user/register`, newUser);\n\n      if (!response.data.success) {\n        alert('Something went wrong');\n      } else {\n        dispatch({\n          type: 'LOG_USER',\n          payload: {\n            firstName: response.data.firstName,\n            lastName: response.data.lastName,\n            mail: response.data.mail,\n            token: response.data.token,\n            rol: response.data.rol,\n            rating: response.data.rating,\n            success: response.data.success,\n            contact: response.data.contact\n          }\n        });\n      }\n    };\n  },\n  forcedLogIn: tokenLS => {\n    return async (dispatch, getState) => {\n      const response = await axios.get(path + `/user/login`, {\n        headers: {\n          Authorization: `Bearer ${tokenLS}`\n        }\n      });\n      dispatch({\n        type: 'LOG_USER',\n        payload: {\n          firstName: response.data.firstName,\n          lastName: response.data.lastName,\n          mail: response.data.mail,\n          token: tokenLS,\n          rol: response.data.rol,\n          rating: response.data.rating,\n          contact: response.data.contact\n        }\n      });\n    };\n  },\n  forcedRol: () => {\n    return async (dispatch, getState) => {\n      const rol = getState().authReducer.rol;\n\n      if (rol === '') {}\n    };\n  },\n  logOutUser: () => {\n    return (dispatch, getState) => {\n      dispatch({\n        type: 'LOGOUT_USER'\n      });\n    };\n  },\n  sendMail: mail => {\n    return async (dispatch, getState) => {\n      const response = await axios.put(path + '/sendMail', {\n        mail\n      });\n      dispatch({\n        type: \"SEND_MAIL\"\n      });\n      return response.data.success;\n    };\n  },\n  addNewsletter: mail => {\n    return async (dispatch, getState) => {\n      const response = await axios.post(path + '/newsletter', {\n        mail\n      });\n      dispatch({\n        type: 'ADD_NEWSLETTER'\n      });\n      var errorResponse = '';\n\n      if (response.data.error === undefined) {\n        return errorResponse = response.data;\n      } else {\n        return errorResponse = response.data.info;\n      }\n\n      return errorResponse;\n    };\n  },\n  lowNewsletter: mail => {\n    return async (dispatch, getState) => {\n      const response = await axios.delete(path + '/newsletter', {\n        mail\n      });\n      dispatch({\n        type: 'LOW_NEWSLETTER'\n      });\n    };\n  },\n  rating: (productId, rating, token) => {\n    return async (dispatch, getState) => {\n      const response = await axios.post(path + `/user/rating`, {\n        productId,\n        rating\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      if (!response.data.success) {\n        toast('Something went wrong');\n      } else {\n        dispatch({\n          type: 'RATING',\n          payload: {\n            rating: response.data.rating,\n            productId: response.data.productId\n          }\n        });\n      }\n    };\n  },\n  ratingUpdate: (productId, rating, token) => {\n    return async (dispatch, getState) => {\n      const response = await axios.post(path + `/user/ratingUpdate`, {\n        productId,\n        rating\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      if (!response.data.success) {\n        toast('Something went wrong');\n      } else {\n        dispatch({\n          type: 'RATING',\n          payload: {\n            rating: response.data.rating,\n            productId: response.data.productId\n          }\n        });\n      }\n    };\n  },\n  postContact: (country, city, address, postalCode, phoneNumber, token) => {\n    return async (dispatch, getState) => {\n      const response = await axios.post(path + `/user/direction`, {\n        country,\n        city,\n        address,\n        postalCode,\n        phoneNumber\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      if (!response.data.success) {\n        toast('Something went wrong');\n      } else {\n        dispatch({\n          type: 'GET_CONTACT',\n          payload: {\n            contact: response.data.contact\n          } // {country: response.data.country, city: response.data.city, address: response.data.address, postalCode: response.data.postalCode, phoneNumber: response.data.phoneNumber}\n\n        });\n      }\n    };\n  },\n  changePassword: (mail, password) => {\n    return async (dispatch, getState) => {\n      const response = await axios.put(path + '/changePassword', {\n        mail,\n        password\n      });\n      dispatch({\n        type: 'CHANGE_PASSWORD'\n      });\n      return response.data;\n    };\n  }\n};\nexport default authActions;","map":{"version":3,"sources":["/Users/lumendez/Desktop/grupo rojo/Challenge3/web/frontend/src/redux/actions/authActions.js"],"names":["axios","toast","Swal","path","authActions","newUser","dispatch","getState","response","post","data","success","error","type","payload","firstName","lastName","mail","token","contact","logUser","rol","rating","newUserGoogle","alert","forcedLogIn","tokenLS","get","headers","Authorization","forcedRol","authReducer","logOutUser","sendMail","put","addNewsletter","errorResponse","undefined","info","lowNewsletter","delete","productId","ratingUpdate","postContact","country","city","address","postalCode","phoneNumber","changePassword","password"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { toast } from 'react-toastify';\nimport Swal from 'sweetalert2'\n\n\nvar path = 'http://localhost:4000/api'\n\nconst authActions = {\n\n    newUser: newUser => {\n        return async (dispatch, getState) => {\n            const response = await axios.post(path + `/user/register`, newUser)\n            if (!response.data.success) {\n                toast.error('Incorrect mail or password')\n            } else {\n                dispatch({\n                    type: 'LOG_USER',\n                    payload: {\n                        firstName: response.data.firstName,\n                        lastName: response.data.lastName,\n                        mail: response.data.mail,\n                        token: response.data.token,\n                        contact: response.data.contact\n                    }\n                })\n            }\n        }\n    },\n\n    logUser: logUser => {\n        return async (dispatch, getState) => {\n            const response = await axios.post(path + `/user/login`, logUser)\n            if (!response.data.success) {\n                toast.error('Incorrect mail or password')\n            } else {\n                toast('Welcome')\n                dispatch({\n                    type: 'LOG_USER',\n                    payload: {\n                        firstName: response.data.firstName,\n                        lastName: response.data.lastName,\n                        mail: response.data.mail,\n                        token: response.data.token,\n                        contact: response.data.contact,\n                        rol: response.data.rol,\n                        rating: response.data.rating,\n                        success: response.data.success\n                    }\n                })\n            }\n        }\n    },\n\n    newUserGoogle: newUser => {\n        return async (dispatch, getState) => {\n            const response = await axios.post(path + `/user/register`, newUser)\n            if (!response.data.success) {\n                alert('Something went wrong')\n            } else {\n                dispatch({\n                    type: 'LOG_USER',\n                    payload: {\n                        firstName: response.data.firstName,\n                        lastName: response.data.lastName,\n                        mail: response.data.mail,\n                        token: response.data.token,\n                        rol: response.data.rol,\n                        rating: response.data.rating,\n                        success: response.data.success,\n                        contact: response.data.contact\n                    }\n                })\n            }\n        }\n    },\n\n    forcedLogIn: tokenLS => {\n        return async (dispatch, getState) => {\n            const response = await axios.get(path + `/user/login`, {\n                headers: {\n                    Authorization: `Bearer ${tokenLS}`\n                }\n            })\n            dispatch({\n                type: 'LOG_USER',\n                payload: {\n                    firstName: response.data.firstName,\n                    lastName: response.data.lastName,\n                    mail: response.data.mail,\n                    token: tokenLS,\n                    rol: response.data.rol,\n                    rating: response.data.rating,\n                    contact: response.data.contact\n                }\n            })\n\n\n        }\n    },\n    forcedRol: () => {\n        return async (dispatch, getState) => {\n            const rol = getState().authReducer.rol\n            if (rol === '') {\n\n            }\n        }\n    },\n    logOutUser: () => {\n        return (dispatch, getState) => {\n            dispatch({\n                type: 'LOGOUT_USER'\n            })\n        }\n    },\n\n    sendMail: (mail) => {\n\n        return async (dispatch, getState) => {\n            const response = await axios.put(path + '/sendMail', { mail })\n\n            dispatch({\n                type: \"SEND_MAIL\"\n            })\n            return response.data.success\n        }\n    },\n\n    addNewsletter: mail => {\n        return async (dispatch, getState) => {\n            const response = await axios.post(path + '/newsletter', { mail })\n\n            dispatch({\n                type: 'ADD_NEWSLETTER',\n            })\n\n            var errorResponse = ''\n            if (response.data.error === undefined) {\n                return errorResponse = response.data\n            } else {\n                return errorResponse = response.data.info\n            }\n            return errorResponse\n        }\n    },\n\n    lowNewsletter: mail => {\n        return async (dispatch, getState) => {\n            const response = await axios.delete(path + '/newsletter', { mail })\n            dispatch({\n                type: 'LOW_NEWSLETTER'\n            })\n        }\n    },\n\n    rating: (productId, rating, token) => {\n\n        return async (dispatch, getState) => {\n            const response = await axios.post(path + `/user/rating`, { productId, rating }, {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            })\n\n            if (!response.data.success) {\n                toast('Something went wrong')\n            } else {\n                dispatch({\n                    type: 'RATING',\n                    payload: { rating: response.data.rating, productId: response.data.productId }\n                })\n            }\n        }\n    },\n    ratingUpdate: (productId, rating, token) => {\n\n        return async (dispatch, getState) => {\n            const response = await axios.post(path + `/user/ratingUpdate`, { productId, rating }, {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            })\n\n            if (!response.data.success) {\n                toast('Something went wrong')\n            } else {\n                dispatch({\n                    type: 'RATING',\n                    payload: { rating: response.data.rating, productId: response.data.productId }\n                })\n            }\n        }\n    },\n\n    postContact: (country, city, address, postalCode, phoneNumber, token) => {\n        return async (dispatch, getState) => {\n            const response = await axios.post(path + `/user/direction`, { country, city, address, postalCode, phoneNumber }, {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            })\n            if (!response.data.success) {\n                toast('Something went wrong')\n            } else {\n                dispatch({\n                    type: 'GET_CONTACT',\n                    payload: { contact: response.data.contact }\n                    // {country: response.data.country, city: response.data.city, address: response.data.address, postalCode: response.data.postalCode, phoneNumber: response.data.phoneNumber}\n                })\n            }\n\n        }\n    },\n\n    changePassword: (mail, password) => {\n        return async (dispatch, getState) => {\n            const response = await axios.put(path + '/changePassword', { mail, password })\n            dispatch({\n                type: 'CHANGE_PASSWORD'\n            })\n            return response.data\n        }\n    }\n\n}\n\nexport default authActions"]},"metadata":{},"sourceType":"module"}