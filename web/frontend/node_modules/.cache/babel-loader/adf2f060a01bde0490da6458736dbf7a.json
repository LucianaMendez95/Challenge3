{"ast":null,"code":"import axios from 'axios';\nvar path = `http://localhost:4000/api`;\nconst key1 = ['_id', 'size', 'color'];\nconst key2 = ['size', 'color'];\n\nconst sonIguales = (prod1, prod2, keyProc) => {\n  let condicion = true;\n  keyProc.forEach(key => {\n    if (!condicion) return;\n    condicion = prod1[key] === prod2[key];\n  });\n  return condicion;\n};\n\nconst updateLocal = (listProduct, carrito) => {\n  localStorage.removeItem(\"listProduct\");\n  localStorage.removeItem(\"carrito\");\n  localStorage.setItem(\"listProduct\", JSON.stringify(listProduct));\n  localStorage.setItem(\"carito\", JSON.stringify(carrito));\n};\n\nconst modificarCant = (prodMo, listProduct, cant = 1) => {\n  let posi = listProduct.indexOf(prodMo);\n  listProduct[posi].cant = listProduct[posi].cant + cant;\n};\n\nconst updateProduct = (product, listProduct, cant) => {\n  let productUpdate = listProduct.filter(prod => prod._id === product._id)[0];\n  let pos = listProduct.indexOf(productUpdate);\n  const varientsUpdate = listProduct[pos].variants;\n  productUpdate = varientsUpdate.filter(varie => sonIguales(varie, product, key2))[0];\n  pos = varientsUpdate.indexOf(productUpdate);\n  varientsUpdate[pos].stock = Number(varientsUpdate[pos].stock) + cant;\n};\n\nconst shoppingCartActions = {\n  addProduct: prod => (dispatch, getState) => {\n    const {\n      product\n    } = getState().itemReducer;\n    const {\n      listProduct\n    } = getState().shoppingCartReducer;\n    const pertenece = listProduct.filter(produ => sonIguales(produ, prod, key1));\n    if (pertenece.length !== 0) modificarCant(pertenece[0], listProduct);else listProduct.push(prod);\n    updateProduct(prod, product, -1);\n    updateLocal(product, listProduct);\n    prod.cant = 1;\n  },\n  updateQuantity: (prod, cant) => (dispatch, getState) => {\n    const {\n      product\n    } = getState().itemReducer;\n    const {\n      listProduct\n    } = getState().shoppingCartReducer;\n    updateProduct(prod, product, -cant);\n    modificarCant(prod, listProduct, cant);\n    updateLocal(product, listProduct);\n  },\n  removeProduct: prod => (dispatch, getState) => {\n    const {\n      product\n    } = getState().itemReducer;\n    updateProduct(prod, product, prod.cant);\n    const {\n      listProduct\n    } = getState().shoppingCartReducer;\n    const updateListProduct = listProduct.filter(produ => produ !== prod);\n    updateLocal(product, updateListProduct);\n    dispatch({\n      type: 'REMOVE_PRODUCT',\n      payload: updateListProduct\n    });\n  },\n  removeListProduct: () => (dispatch, getState) => {\n    dispatch({\n      type: 'REMOVE_LIST_PRODUCT'\n    });\n  },\n  finishBuying: () => async (dispatch, getState) => {\n    const {\n      listProduct\n    } = getState().shoppingCartReducer;\n    const response = await axios.put(path + `/finishBuying`, {\n      listProduct\n    });\n    dispatch({\n      type: 'ADD_PRODUCT'\n    });\n  },\n  forcedCart: cart => (dispatch, getState) => {\n    const cartParse = JSON.parse(cart);\n    dispatch({\n      type: 'REMOVE_PRODUCT',\n      payload: cartParse\n    });\n  }\n};\nexport default shoppingCartActions;","map":{"version":3,"sources":["/Users/lumendez/Desktop/grupo rojo/Challenge3/web/frontend/src/redux/actions/shoppingCartActions.js"],"names":["axios","path","key1","key2","sonIguales","prod1","prod2","keyProc","condicion","forEach","key","updateLocal","listProduct","carrito","localStorage","removeItem","setItem","JSON","stringify","modificarCant","prodMo","cant","posi","indexOf","updateProduct","product","productUpdate","filter","prod","_id","pos","varientsUpdate","variants","varie","stock","Number","shoppingCartActions","addProduct","dispatch","getState","itemReducer","shoppingCartReducer","pertenece","produ","length","push","updateQuantity","removeProduct","updateListProduct","type","payload","removeListProduct","finishBuying","response","put","forcedCart","cart","cartParse","parse"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAIC,IAAI,GAAI,2BAAZ;AAEA,MAAMC,IAAI,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,CAAb;AACA,MAAMC,IAAI,GAAG,CAAC,MAAD,EAAS,OAAT,CAAb;;AAGA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,OAAf,KAA2B;AAC1C,MAAIC,SAAS,GAAG,IAAhB;AACAD,EAAAA,OAAO,CAACE,OAAR,CAAgBC,GAAG,IAAI;AACnB,QAAI,CAACF,SAAL,EAAgB;AAChBA,IAAAA,SAAS,GAAGH,KAAK,CAACK,GAAD,CAAL,KAAeJ,KAAK,CAACI,GAAD,CAAhC;AACH,GAHD;AAIA,SAAOF,SAAP;AACH,CAPD;;AASA,MAAMG,WAAW,GAAG,CAACC,WAAD,EAAcC,OAAd,KAA0B;AAC1CC,EAAAA,YAAY,CAACC,UAAb,CAAwB,aAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,SAAxB;AACAD,EAAAA,YAAY,CAACE,OAAb,CAAqB,aAArB,EAAoCC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAApC;AACAE,EAAAA,YAAY,CAACE,OAAb,CAAqB,QAArB,EAA+BC,IAAI,CAACC,SAAL,CAAeL,OAAf,CAA/B;AACH,CALD;;AAOA,MAAMM,aAAa,GAAG,CAACC,MAAD,EAASR,WAAT,EAAsBS,IAAI,GAAG,CAA7B,KAAmC;AACrD,MAAIC,IAAI,GAAGV,WAAW,CAACW,OAAZ,CAAoBH,MAApB,CAAX;AACAR,EAAAA,WAAW,CAACU,IAAD,CAAX,CAAkBD,IAAlB,GAAyBT,WAAW,CAACU,IAAD,CAAX,CAAkBD,IAAlB,GAAyBA,IAAlD;AACH,CAHD;;AAKA,MAAMG,aAAa,GAAG,CAACC,OAAD,EAAUb,WAAV,EAAuBS,IAAvB,KAAgC;AAClD,MAAIK,aAAa,GAAGd,WAAW,CAACe,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaJ,OAAO,CAACI,GAAhD,EAAqD,CAArD,CAApB;AACA,MAAIC,GAAG,GAAGlB,WAAW,CAACW,OAAZ,CAAoBG,aAApB,CAAV;AACA,QAAMK,cAAc,GAAGnB,WAAW,CAACkB,GAAD,CAAX,CAAiBE,QAAxC;AACAN,EAAAA,aAAa,GAAGK,cAAc,CAACJ,MAAf,CAAsBM,KAAK,IAAI7B,UAAU,CAAC6B,KAAD,EAAQR,OAAR,EAAiBtB,IAAjB,CAAzC,EAAiE,CAAjE,CAAhB;AACA2B,EAAAA,GAAG,GAAGC,cAAc,CAACR,OAAf,CAAuBG,aAAvB,CAAN;AACAK,EAAAA,cAAc,CAACD,GAAD,CAAd,CAAoBI,KAApB,GAA4BC,MAAM,CAACJ,cAAc,CAACD,GAAD,CAAd,CAAoBI,KAArB,CAAN,GAAoCb,IAAhE;AACH,CAPD;;AASA,MAAMe,mBAAmB,GAAG;AACxBC,EAAAA,UAAU,EAAGT,IAAD,IAAU,CAACU,QAAD,EAAWC,QAAX,KAAwB;AAC1C,UAAM;AAAEd,MAAAA;AAAF,QAAcc,QAAQ,GAAGC,WAA/B;AACA,UAAM;AAAE5B,MAAAA;AAAF,QAAkB2B,QAAQ,GAAGE,mBAAnC;AACA,UAAMC,SAAS,GAAG9B,WAAW,CAACe,MAAZ,CAAmBgB,KAAK,IAAIvC,UAAU,CAACuC,KAAD,EAAQf,IAAR,EAAc1B,IAAd,CAAtC,CAAlB;AACA,QAAIwC,SAAS,CAACE,MAAV,KAAqB,CAAzB,EACIzB,aAAa,CAACuB,SAAS,CAAC,CAAD,CAAV,EAAe9B,WAAf,CAAb,CADJ,KAGIA,WAAW,CAACiC,IAAZ,CAAiBjB,IAAjB;AACJJ,IAAAA,aAAa,CAACI,IAAD,EAAOH,OAAP,EAAgB,CAAC,CAAjB,CAAb;AACAd,IAAAA,WAAW,CAACc,OAAD,EAAUb,WAAV,CAAX;AACAgB,IAAAA,IAAI,CAACP,IAAL,GAAY,CAAZ;AACH,GAZuB;AAaxByB,EAAAA,cAAc,EAAE,CAAClB,IAAD,EAAOP,IAAP,KAAgB,CAACiB,QAAD,EAAWC,QAAX,KAAwB;AACpD,UAAM;AAAEd,MAAAA;AAAF,QAAcc,QAAQ,GAAGC,WAA/B;AACA,UAAM;AAAE5B,MAAAA;AAAF,QAAkB2B,QAAQ,GAAGE,mBAAnC;AACAjB,IAAAA,aAAa,CAACI,IAAD,EAAOH,OAAP,EAAgB,CAACJ,IAAjB,CAAb;AACAF,IAAAA,aAAa,CAACS,IAAD,EAAOhB,WAAP,EAAoBS,IAApB,CAAb;AACAV,IAAAA,WAAW,CAACc,OAAD,EAAUb,WAAV,CAAX;AACH,GAnBuB;AAoBxBmC,EAAAA,aAAa,EAAGnB,IAAD,IAAU,CAACU,QAAD,EAAWC,QAAX,KAAwB;AAC7C,UAAM;AAAEd,MAAAA;AAAF,QAAcc,QAAQ,GAAGC,WAA/B;AACAhB,IAAAA,aAAa,CAACI,IAAD,EAAOH,OAAP,EAAgBG,IAAI,CAACP,IAArB,CAAb;AACA,UAAM;AAAET,MAAAA;AAAF,QAAkB2B,QAAQ,GAAGE,mBAAnC;AACA,UAAMO,iBAAiB,GAAGpC,WAAW,CAACe,MAAZ,CAAmBgB,KAAK,IAAIA,KAAK,KAAKf,IAAtC,CAA1B;AACAjB,IAAAA,WAAW,CAACc,OAAD,EAAUuB,iBAAV,CAAX;AACAV,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAE,gBADD;AAELC,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAIH,GA9BuB;AA+BxBG,EAAAA,iBAAiB,EAAE,MAAM,CAACb,QAAD,EAAWC,QAAX,KAAwB;AAC7CD,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR;AAGH,GAnCuB;AAoCxBG,EAAAA,YAAY,EAAE,MAAM,OAAOd,QAAP,EAAiBC,QAAjB,KAA8B;AAC9C,UAAM;AAAE3B,MAAAA;AAAF,QAAkB2B,QAAQ,GAAGE,mBAAnC;AACA,UAAMY,QAAQ,GAAG,MAAMrD,KAAK,CAACsD,GAAN,CAAUrD,IAAI,GAAI,eAAlB,EAAkC;AAAEW,MAAAA;AAAF,KAAlC,CAAvB;AACA0B,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACH,GAxCuB;AAyCxBM,EAAAA,UAAU,EAAGC,IAAD,IAAU,CAAClB,QAAD,EAAWC,QAAX,KAAwB;AAC1C,UAAMkB,SAAS,GAAGxC,IAAI,CAACyC,KAAL,CAAWF,IAAX,CAAlB;AACAlB,IAAAA,QAAQ,CAAC;AACLW,MAAAA,IAAI,EAAE,gBADD;AAELC,MAAAA,OAAO,EAAEO;AAFJ,KAAD,CAAR;AAKH;AAhDuB,CAA5B;AAmDA,eAAerB,mBAAf","sourcesContent":["import axios from 'axios'\r\nvar path = `http://localhost:4000/api`\r\n\r\nconst key1 = ['_id', 'size', 'color']\r\nconst key2 = ['size', 'color']\r\n\r\n\r\nconst sonIguales = (prod1, prod2, keyProc) => {\r\n    let condicion = true\r\n    keyProc.forEach(key => {\r\n        if (!condicion) return\r\n        condicion = prod1[key] === prod2[key]\r\n    })\r\n    return condicion\r\n}\r\n\r\nconst updateLocal = (listProduct, carrito) => {\r\n    localStorage.removeItem(\"listProduct\")\r\n    localStorage.removeItem(\"carrito\")\r\n    localStorage.setItem(\"listProduct\", JSON.stringify(listProduct))\r\n    localStorage.setItem(\"carito\", JSON.stringify(carrito))\r\n}\r\n\r\nconst modificarCant = (prodMo, listProduct, cant = 1) => {\r\n    let posi = listProduct.indexOf(prodMo)\r\n    listProduct[posi].cant = listProduct[posi].cant + cant\r\n}\r\n\r\nconst updateProduct = (product, listProduct, cant) => {\r\n    let productUpdate = listProduct.filter(prod => prod._id === product._id)[0]\r\n    let pos = listProduct.indexOf(productUpdate)\r\n    const varientsUpdate = listProduct[pos].variants\r\n    productUpdate = varientsUpdate.filter(varie => sonIguales(varie, product, key2))[0]\r\n    pos = varientsUpdate.indexOf(productUpdate)\r\n    varientsUpdate[pos].stock = Number(varientsUpdate[pos].stock) + cant\r\n}\r\n\r\nconst shoppingCartActions = {\r\n    addProduct: (prod) => (dispatch, getState) => {\r\n        const { product } = getState().itemReducer\r\n        const { listProduct } = getState().shoppingCartReducer\r\n        const pertenece = listProduct.filter(produ => sonIguales(produ, prod, key1))\r\n        if (pertenece.length !== 0)\r\n            modificarCant(pertenece[0], listProduct)\r\n        else\r\n            listProduct.push(prod)\r\n        updateProduct(prod, product, -1)\r\n        updateLocal(product, listProduct)\r\n        prod.cant = 1\r\n    },\r\n    updateQuantity: (prod, cant) => (dispatch, getState) => {\r\n        const { product } = getState().itemReducer\r\n        const { listProduct } = getState().shoppingCartReducer\r\n        updateProduct(prod, product, -cant)\r\n        modificarCant(prod, listProduct, cant)\r\n        updateLocal(product, listProduct)\r\n    },\r\n    removeProduct: (prod) => (dispatch, getState) => {\r\n        const { product } = getState().itemReducer\r\n        updateProduct(prod, product, prod.cant)\r\n        const { listProduct } = getState().shoppingCartReducer\r\n        const updateListProduct = listProduct.filter(produ => produ !== prod)\r\n        updateLocal(product, updateListProduct)\r\n        dispatch({\r\n            type: 'REMOVE_PRODUCT',\r\n            payload: updateListProduct\r\n        })\r\n    },\r\n    removeListProduct: () => (dispatch, getState) => {\r\n        dispatch({\r\n            type: 'REMOVE_LIST_PRODUCT'\r\n        })\r\n    },\r\n    finishBuying: () => async (dispatch, getState) => {\r\n        const { listProduct } = getState().shoppingCartReducer\r\n        const response = await axios.put(path + `/finishBuying`, { listProduct })\r\n        dispatch({ type: 'ADD_PRODUCT', })\r\n    },\r\n    forcedCart: (cart) => (dispatch, getState) => {\r\n        const cartParse = JSON.parse(cart)\r\n        dispatch({\r\n            type: 'REMOVE_PRODUCT',\r\n            payload: cartParse\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport default shoppingCartActions\r\n"]},"metadata":{},"sourceType":"module"}