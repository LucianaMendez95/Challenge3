{"ast":null,"code":"import axios from 'axios';\nimport swal from 'sweetalert';\nvar path = `http://localhost:4000/api`;\nconst itemActions = {\n  addItem: formItem => {\n    return async (dispatch, getState) => {\n      const response = await axios.post(path + `/product/addProduct`, formItem, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }); // const item = response.data\n\n      if (!response.data.success) {\n        alert('Something went wrong');\n      } else {\n        swal({\n          title: 'Pyral',\n          text: 'The product was uploaded successfully!',\n          buttons: {\n            confirm: true\n          }\n        }); // dispatch({\n        //     type: 'ADD_ITEM',\n        //     payload: { title: item.title, description: item.description, photo: item.photo, price: item.price, stock: item.stock, type: item.type }\n        // })\n      }\n    };\n  },\n  getProducts: () => {\n    return async (dispatch, getState) => {\n      const {\n        listProduct\n      } = getState().shoppingCartReducer;\n\n      if (listProduct.length !== 0) {\n        return;\n      }\n\n      const response = await axios.get(path + `/product/getProducts`);\n      var info = response.data;\n      localStorage.setItem(\"listProduct\", JSON.stringify(info.product));\n      localStorage.setItem(\"carito\", JSON.stringify([]));\n      dispatch({\n        type: 'ADD_ITEM',\n        payload: info.product\n      });\n    };\n  },\n  getCountries: () => {\n    return async (dispatch, getState) => {\n      const response = await axios.get('https://quiet-savannah-25909.herokuapp.com/api/countries');\n      var info = response.data;\n      dispatch({\n        type: 'GET_COUNTRIES',\n        payload: info\n      });\n    };\n  },\n  putVariant: formItem => {\n    return async (dispatch, getState) => {\n      const response = await axios.put(path + `/product/addProduct`, formItem, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n    };\n  },\n  deleteItem: product => {\n    return async (dispatch, getState) => {\n      const response = await axios.put(path + `/product/deleteProduct`, product);\n    };\n  },\n  modifyVariant: async product => {\n    return async (dispatch, getState) => {\n      const response = await axios.put(path + `/product/modifyProduct`, {\n        product\n      });\n    };\n  },\n  modifyProduct: product => async (dispatch, getState) => {\n    const response = await axios.put(`${path}/product/modifyProduct`, { ...product\n    });\n  },\n  selectProductId: productId => async (dispatch, getState) => {\n    const {\n      product\n    } = getState().itemReducer;\n    const prod = product.filter(pro => pro._id === productId);\n    return prod[0];\n  },\n  forcedPoducts: products => (dispatch, getState) => {\n    const productsParse = JSON.parse(products);\n    dispatch({\n      type: 'ADD_ITEM',\n      payload: productsParse\n    });\n  },\n  upViews: productId => {\n    return async (dispatch, getState) => {\n      const response = await axios.get(path + '/viewsProduct/' + productId);\n      dispatch({\n        type: 'UP_VIEWS'\n      });\n    };\n  },\n  rating: (productId, stars) => {\n    return async (dispatch, getState) => {\n      const response = await axios.post(path + `/product/ratingProduct`, {\n        productId,\n        stars\n      });\n\n      if (!response.data.success) {\n        swal('Something went wrong');\n      } else {\n        dispatch({\n          type: 'RATING',\n          payload: {\n            rating: response.data.rating\n          }\n        });\n        swal('Rating mandado');\n      }\n    };\n  }\n};\nexport default itemActions; //Up views by product","map":{"version":3,"sources":["/Users/lumendez/Desktop/grupo rojo/Challenge3/web/frontend/src/redux/actions/itemActions.js"],"names":["axios","swal","path","itemActions","addItem","formItem","dispatch","getState","response","post","headers","data","success","alert","title","text","buttons","confirm","getProducts","listProduct","shoppingCartReducer","length","get","info","localStorage","setItem","JSON","stringify","product","type","payload","getCountries","putVariant","put","deleteItem","modifyVariant","modifyProduct","selectProductId","productId","itemReducer","prod","filter","pro","_id","forcedPoducts","products","productsParse","parse","upViews","rating","stars"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport swal from 'sweetalert';\r\nvar path = `http://localhost:4000/api`\r\n\r\nconst itemActions = {\r\n\r\n    addItem: formItem => {\r\n\r\n        return async (dispatch, getState) => {\r\n            const response = await axios.post(path + `/product/addProduct`, formItem, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            })\r\n            // const item = response.data\r\n            if (!response.data.success) {\r\n                alert('Something went wrong')\r\n            } else {\r\n                swal({\r\n                    title: 'Pyral',\r\n                    text: 'The product was uploaded successfully!',\r\n                    buttons: {\r\n                        confirm: true,\r\n                    }\r\n                })\r\n                // dispatch({\r\n                //     type: 'ADD_ITEM',\r\n                //     payload: { title: item.title, description: item.description, photo: item.photo, price: item.price, stock: item.stock, type: item.type }\r\n                // })\r\n            }\r\n        }\r\n    },\r\n    getProducts: () => {\r\n        return async (dispatch, getState) => {\r\n            const { listProduct } = getState().shoppingCartReducer\r\n            if (listProduct.length !== 0) {\r\n                return\r\n            }\r\n\r\n            const response = await axios.get(path + `/product/getProducts`);\r\n            var info = response.data;\r\n\r\n            localStorage.setItem(\"listProduct\", JSON.stringify(info.product))\r\n            localStorage.setItem(\"carito\", JSON.stringify([]))\r\n            dispatch({\r\n                type: 'ADD_ITEM',\r\n                payload: info.product\r\n            })\r\n        }\r\n    },\r\n\r\n    getCountries: () => {\r\n        return async (dispatch, getState) => {\r\n            const response = await axios.get('https://quiet-savannah-25909.herokuapp.com/api/countries')\r\n            var info = response.data\r\n            dispatch({\r\n                type: 'GET_COUNTRIES',\r\n                payload: info\r\n            })\r\n        }\r\n    },\r\n    putVariant: (formItem) => {\r\n        return async (dispatch, getState) => {\r\n            const response = await axios.put(path + `/product/addProduct`, formItem, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            })\r\n        }\r\n    },\r\n    deleteItem: (product) => {\r\n        return async (dispatch, getState) => {\r\n\r\n            const response = await axios.put(path + `/product/deleteProduct`, product)\r\n        }\r\n    },\r\n    modifyVariant: async (product) => {\r\n        return async (dispatch, getState) => {\r\n            const response = await axios.put(path + `/product/modifyProduct`, { product })\r\n        }\r\n    },\r\n    modifyProduct: (product) => async (dispatch, getState) => {\r\n        const response = await axios.put(`${path}/product/modifyProduct`, { ...product })\r\n    },\r\n    selectProductId: (productId) => async (dispatch, getState) => {\r\n        const { product } = getState().itemReducer\r\n        const prod = product.filter(pro => pro._id === productId)\r\n        return (prod[0])\r\n    },\r\n    forcedPoducts: (products) => (dispatch, getState) => {\r\n        const productsParse = JSON.parse(products)\r\n        dispatch({\r\n            type: 'ADD_ITEM',\r\n            payload: productsParse\r\n        })\r\n    },\r\n    upViews: (productId) => {\r\n        return async (dispatch, getState) => {\r\n            const response = await axios.get(path + '/viewsProduct/' + productId)\r\n            dispatch({\r\n                type: 'UP_VIEWS'\r\n            })\r\n        }\r\n    },\r\n    rating: (productId, stars) => {\r\n\r\n        return async (dispatch, getState) => {\r\n            const response = await axios.post(path + `/product/ratingProduct`, { productId, stars })\r\n            if (!response.data.success) {\r\n                swal('Something went wrong')\r\n            } else {\r\n                dispatch({\r\n                    type: 'RATING',\r\n                    payload: { rating: response.data.rating }\r\n                })\r\n                swal('Rating mandado')\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nexport default itemActions\r\n//Up views by product\r\n"]},"metadata":{},"sourceType":"module"}